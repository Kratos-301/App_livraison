{"ast":null,"code":"// üìÅ src/socket.js\n\nimport { io } from 'socket.io-client';\nfunction handleSocket(io) {\n  io.on('connection', socket => {\n    console.log(\"üîó Client connect√©:\", socket.id);\n\n    // Le client rejoint une room sp√©cifique\n    socket.on('joinRoom', cmdId => {\n      socket.join(`cmd_${cmdId}`);\n      console.log(`Client ${socket.id} a rejoint la room cmd_${cmdId}`);\n    });\n\n    // Lorsqu‚Äôun livreur s'enregistre\n    socket.on('registerLivreur', livreurId => {\n      socket.livreurId = livreurId;\n      db.query(\"UPDATE livreuruser SET isOnline = 1 WHERE id = ?\", [livreurId], err => {\n        if (err) {\n          console.error(\"‚ùå Erreur mise √† jour online :\", err);\n        } else {\n          console.log(\"üü¢ Livreur en ligne :\", livreurId);\n          io.emit('livreurStatusChange', {\n            id: livreurId,\n            status: 'online'\n          });\n        }\n      });\n    });\n\n    // Lorsqu‚Äôun livreur se d√©connecte\n    socket.on('disconnect', () => {\n      console.log(\"‚ùå D√©connect√© :\", socket.id);\n      const livreurId = socket.livreurId;\n      if (!livreurId) return;\n\n      // 1. Marquer le livreur hors ligne\n      db.query(\"UPDATE livreuruser SET isOnline = 0 WHERE id = ?\", [livreurId], err => {\n        if (err) {\n          console.error(\"‚ùå Erreur mise √† jour offline :\", err);\n        } else {\n          console.log(\"üî¥ Livreur hors-ligne :\", livreurId);\n          io.emit('livreurStatusChange', {\n            id: livreurId,\n            status: 'offline'\n          });\n        }\n      });\n\n      // 2. Trouver la commande active\n      db.query(`\n        SELECT id \n        FROM commande \n        WHERE id_livreur = ? AND statut = 1 AND statut_2 = 1 AND statut_3 = 0 \n        LIMIT 1\n      `, [livreurId], (err, results) => {\n        if (err) {\n          console.error(\"‚ùå Erreur r√©cup√©ration commande :\", err);\n          return;\n        }\n        if (results.length > 0) {\n          const commandeId = results[0].id;\n\n          // 3. Annuler la commande + remettre dispo + raison annulation\n          db.query(`\n            UPDATE commande \n            SET statut_3 = 1, disponibilite = 1 \n            WHERE id = ?\n          `, [commandeId], err2 => {\n            if (err2) {\n              console.error(\"‚ùå Erreur annulation commande :\", err2);\n            } else {\n              console.log(`üö´ Commande ${commandeId} annul√©e (d√©connexion)`);\n\n              // 4. Notifier la room\n              io.to(`cmd_${commandeId}`).emit(\"commandeAnnulee\", {\n                message: \"Le livreur s'est d√©connect√©. La commande est annul√©e.\",\n                commandeId\n              });\n            }\n          });\n        }\n      });\n    });\n  });\n}\nexport default socket;","map":{"version":3,"names":["io","handleSocket","on","socket","console","log","id","cmdId","join","livreurId","db","query","err","error","emit","status","results","length","commandeId","err2","to","message"],"sources":["C:/Users/krato/Desktop/app_livraison/frontend/src/socket.js"],"sourcesContent":["// üìÅ src/socket.js\r\n\r\nimport { io } from 'socket.io-client';\r\n\r\n\r\n\r\nfunction handleSocket(io) {\r\n  io.on('connection', (socket) => {\r\n    console.log(\"üîó Client connect√©:\", socket.id);\r\n\r\n    // Le client rejoint une room sp√©cifique\r\n    socket.on('joinRoom', (cmdId) => {\r\n      socket.join(`cmd_${cmdId}`);\r\n      console.log(`Client ${socket.id} a rejoint la room cmd_${cmdId}`);\r\n    });\r\n\r\n    // Lorsqu‚Äôun livreur s'enregistre\r\n    socket.on('registerLivreur', (livreurId) => {\r\n      socket.livreurId = livreurId;\r\n      db.query(\"UPDATE livreuruser SET isOnline = 1 WHERE id = ?\", [livreurId], (err) => {\r\n        if (err) {\r\n          console.error(\"‚ùå Erreur mise √† jour online :\", err);\r\n        } else {\r\n          console.log(\"üü¢ Livreur en ligne :\", livreurId);\r\n          io.emit('livreurStatusChange', { id: livreurId, status: 'online' });\r\n        }\r\n      });\r\n    });\r\n\r\n    // Lorsqu‚Äôun livreur se d√©connecte\r\n    socket.on('disconnect', () => {\r\n      console.log(\"‚ùå D√©connect√© :\", socket.id);\r\n      const livreurId = socket.livreurId;\r\n      if (!livreurId) return;\r\n\r\n      // 1. Marquer le livreur hors ligne\r\n      db.query(\"UPDATE livreuruser SET isOnline = 0 WHERE id = ?\", [livreurId], (err) => {\r\n        if (err) {\r\n          console.error(\"‚ùå Erreur mise √† jour offline :\", err);\r\n        } else {\r\n          console.log(\"üî¥ Livreur hors-ligne :\", livreurId);\r\n          io.emit('livreurStatusChange', { id: livreurId, status: 'offline' });\r\n        }\r\n      });\r\n\r\n      // 2. Trouver la commande active\r\n      db.query(`\r\n        SELECT id \r\n        FROM commande \r\n        WHERE id_livreur = ? AND statut = 1 AND statut_2 = 1 AND statut_3 = 0 \r\n        LIMIT 1\r\n      `, [livreurId], (err, results) => {\r\n        if (err) {\r\n          console.error(\"‚ùå Erreur r√©cup√©ration commande :\", err);\r\n          return;\r\n        }\r\n\r\n        if (results.length > 0) {\r\n          const commandeId = results[0].id;\r\n\r\n          // 3. Annuler la commande + remettre dispo + raison annulation\r\n          db.query(`\r\n            UPDATE commande \r\n            SET statut_3 = 1, disponibilite = 1 \r\n            WHERE id = ?\r\n          `, [commandeId], (err2) => {\r\n            if (err2) {\r\n              console.error(\"‚ùå Erreur annulation commande :\", err2);\r\n            } else {\r\n              console.log(`üö´ Commande ${commandeId} annul√©e (d√©connexion)`);\r\n\r\n              // 4. Notifier la room\r\n              io.to(`cmd_${commandeId}`).emit(\"commandeAnnulee\", {\r\n                message: \"Le livreur s'est d√©connect√©. La commande est annul√©e.\",\r\n                commandeId\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport default socket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}